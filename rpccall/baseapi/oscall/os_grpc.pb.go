// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package oscall

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OSCallClient is the client API for OSCall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OSCallClient interface {
	Mkdir(ctx context.Context, in *Dir, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CPFiles(ctx context.Context, in *FilesToCopy, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WriteFile(ctx context.Context, in *FileWithContent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RMFiles(ctx context.Context, in *FilesToDelete, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type oSCallClient struct {
	cc grpc.ClientConnInterface
}

func NewOSCallClient(cc grpc.ClientConnInterface) OSCallClient {
	return &oSCallClient{cc}
}

func (c *oSCallClient) Mkdir(ctx context.Context, in *Dir, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/os.OSCall/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSCallClient) CPFiles(ctx context.Context, in *FilesToCopy, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/os.OSCall/CPFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSCallClient) WriteFile(ctx context.Context, in *FileWithContent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/os.OSCall/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSCallClient) RMFiles(ctx context.Context, in *FilesToDelete, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/os.OSCall/RMFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSCallServer is the server API for OSCall service.
// All implementations must embed UnimplementedOSCallServer
// for forward compatibility
type OSCallServer interface {
	Mkdir(context.Context, *Dir) (*emptypb.Empty, error)
	CPFiles(context.Context, *FilesToCopy) (*emptypb.Empty, error)
	WriteFile(context.Context, *FileWithContent) (*emptypb.Empty, error)
	RMFiles(context.Context, *FilesToDelete) (*emptypb.Empty, error)
	mustEmbedUnimplementedOSCallServer()
}

// UnimplementedOSCallServer must be embedded to have forward compatible implementations.
type UnimplementedOSCallServer struct {
}

func (UnimplementedOSCallServer) Mkdir(context.Context, *Dir) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedOSCallServer) CPFiles(context.Context, *FilesToCopy) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPFiles not implemented")
}
func (UnimplementedOSCallServer) WriteFile(context.Context, *FileWithContent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedOSCallServer) RMFiles(context.Context, *FilesToDelete) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RMFiles not implemented")
}
func (UnimplementedOSCallServer) mustEmbedUnimplementedOSCallServer() {}

// UnsafeOSCallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OSCallServer will
// result in compilation errors.
type UnsafeOSCallServer interface {
	mustEmbedUnimplementedOSCallServer()
}

func RegisterOSCallServer(s grpc.ServiceRegistrar, srv OSCallServer) {
	s.RegisterService(&OSCall_ServiceDesc, srv)
}

func _OSCall_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSCallServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.OSCall/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSCallServer).Mkdir(ctx, req.(*Dir))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSCall_CPFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesToCopy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSCallServer).CPFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.OSCall/CPFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSCallServer).CPFiles(ctx, req.(*FilesToCopy))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSCall_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileWithContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSCallServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.OSCall/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSCallServer).WriteFile(ctx, req.(*FileWithContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSCall_RMFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesToDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSCallServer).RMFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.OSCall/RMFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSCallServer).RMFiles(ctx, req.(*FilesToDelete))
	}
	return interceptor(ctx, in, info, handler)
}

// OSCall_ServiceDesc is the grpc.ServiceDesc for OSCall service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OSCall_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "os.OSCall",
	HandlerType: (*OSCallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mkdir",
			Handler:    _OSCall_Mkdir_Handler,
		},
		{
			MethodName: "CPFiles",
			Handler:    _OSCall_CPFiles_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _OSCall_WriteFile_Handler,
		},
		{
			MethodName: "RMFiles",
			Handler:    _OSCall_RMFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpccall/baseapi/oscall/os.proto",
}
